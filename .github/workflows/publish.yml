name: Upload Python Package


on:
  push:
    branches: main



env:
  PACKAGE_NAME: "vallog"
  OWNER: "vallereichi"
  GH_TOKEN: ${{secrets.GITHUB_TOKEN}}



jobs:

  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/



  # pypi-publish:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - release-build
  #   permissions:
  #     # IMPORTANT: this permission is mandatory for trusted publishing
  #     id-token: write

  #   # Dedicated environments with protections for publishing are strongly recommended.
  #   # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
  #   environment:
  #     name: pypi
  #     # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
  #     url: https://pypi.org/p/vallog
  #     #
  #     # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
  #     # ALTERNATIVE: exactly, uncomment the following line instead:
  #     # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

  #   steps:
  #     - name: Retrieve release distributions
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: release-dists
  #         path: dist/

  #     - name: Publish release distributions to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         packages-dir: dist/

  github_release:
    name: Create GitHub Release
    needs: [release-build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    

    steps:
      - name: Retrieve release distribution
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

    
      - name: Extract version 
        id: extract_version
        run: |
          WHL_FILE=$(ls dist/*.whl)
          VERSION=$(echo $WHL_FILE | grep -oP '(?<=-)[0-9]+\.[0-9]+\.[0-9]+(?=-)')
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
      

      - name: Create GitHub release
        uses: actions/create-release@v1

        with:
          token: ${{env.GH_TOKEN}}
          tag_name: v${{ steps.extract_version.outputs.VERSION }}
          release_name: Release v${{ steps.extract_version.outputs.VERSION }}
          draft: false
          prerelease: false
